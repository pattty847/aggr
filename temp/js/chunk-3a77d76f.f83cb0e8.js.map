{"version":3,"sources":["webpack:///./src/components/framework/picker/ColorPickerDialog.vue","webpack:///./src/utils/picker.ts","webpack:///src/components/framework/picker/ColorPickerDialog.vue","webpack:///./src/components/framework/picker/ColorPickerDialog.vue?eefe","webpack:///./src/components/framework/picker/ColorPickerDialog.vue?aefd","webpack:///./src/components/framework/picker/ColorPickerDialog.vue?2bda"],"names":["render","_vm","this","_c","_self","staticClass","attrs","outputColor","on","close","nativeOn","$event","stopPropagation","scopedSlots","_u","key","fn","_v","_s","label","proxy","ref","startMovingThumbWithMouse","startMovingThumbWithTouch","updateHue","hue","model","value","callback","$$v","expression","colors","rgb","r","g","b","alpha","updateAlpha","directives","name","rawName","switchFormat","displayColor","setColorFromProp","submitColor","showPalette","_l","swatches","clr","style","preventDefault","setNull","apply","arguments","recentColors","_e","staticRenderFns","round","decimalPrecision","toFixed","replace","convertHexToRgb","hex","hexWithoutHash","channels","step","length","i","channel","slice","push","repeat","rgbChannels","map","parseInt","a","convertHslToHsv","hsl","v","l","s","Math","min","h","hue2rgb","p","q","t","convertHslToRgb","convertHsvToHsl","hsv","lMin","convertHsvToHwb","w","n","k","max","convertHsvToRgb","convertHwbToHsv","hwb","convertRgbToHex","hexChannels","Object","values","int","toString","join","convertRgbToHwb","convertRgbToHsl","clamp","toHueAngle","colorsAreValueEqual","colorA","colorB","channelA","chainConvert","sourceColor","convertFunctions","reduce","color","convert","copyColorObject","newColor","prop","fromHueAngle","endsWith","NaN","boundAngle","parseFloat","fromPercentage","numberString","substring","numberValue","Number","isNaN","toPercentage","from8BitDecimal","to8BitDecimal","fromAlpha","toAlpha","String","detectFormat","prototype","hasOwnProperty","call","formatters","excludeAlphaChannel","includes","formatAsCssColor","format","isValidHexColor","hexColor","startsWith","test","conversions","colorChannels","to","from","parsePropsColor","propsColor","context","document","createElement","getContext","fillStyle","cssFormat","rest","split","parameters","trim","concat","fromEntries","index","ALLOWED_VISIBLE_FORMATS","mixins","components","Dialog","Slider","props","type","default","outputFormat","allowNull","data","activeFormat","movingFromCanvas","computed","visibleChannels","created","workspacesService","Array","mounted","passive","beforeDestroy","methods","moveThumbWithMouse","moveThumbWithTouch","event","moveThumb","hsvColor","stopMovingThumb","getNewThumbPosition","x","y","applyColorUpdates","getEventData","cssColor","setColor","addColorToHistory","activeFormatIndex","updateHexColorValue","updateCanvas","component"],"mappings":"yHAAA,IAAIA,EAAS,WAAkB,IAAIC,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,SAAS,CAACE,YAAY,eAAeC,MAAM,CAAC,MAAO,EAAM,oBAAoBL,EAAIM,aAAaC,GAAG,CAAC,aAAeP,EAAIQ,OAAOC,SAAS,CAAC,UAAY,SAASC,GAAQA,EAAOC,oBAAqBC,YAAYZ,EAAIa,GAAG,CAAC,CAACC,IAAI,SAASC,GAAG,WAAW,MAAO,CAACb,EAAG,MAAM,CAACA,EAAG,MAAM,CAACE,YAAY,SAAS,CAACJ,EAAIgB,GAAGhB,EAAIiB,GAAGjB,EAAIkB,cAAcC,OAAM,MAAS,CAACjB,EAAG,MAAM,CAACkB,IAAI,SAAShB,YAAY,sBAAsBG,GAAG,CAAC,UAAYP,EAAIqB,0BAA0B,WAAarB,EAAIsB,4BAA4B,CAACpB,EAAG,MAAM,CAACkB,IAAI,QAAQhB,YAAY,6BAA6BC,MAAM,CAAC,SAAW,IAAI,aAAa,yBAAyBH,EAAG,MAAM,CAACE,YAAY,wBAAwB,CAACF,EAAG,SAAS,CAACE,YAAY,4BAA4BC,MAAM,CAAC,gBAAiB,EAAM,SAAW,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAQ,IAAM,KAAKE,GAAG,CAAC,MAAQ,SAASG,GAAQ,OAAOV,EAAIuB,UAAUvB,EAAIwB,OAAOC,MAAM,CAACC,MAAO1B,EAAIwB,IAAKG,SAAS,SAAUC,GAAM5B,EAAIwB,IAAII,GAAKC,WAAW,SAAS3B,EAAG,SAAS,CAACE,YAAY,qCAAqCC,MAAM,CAAC,SAAW,CAC7kC,QAA0B,IAAnBL,EAAI8B,OAAOC,IAAIC,MAA+B,IAAnBhC,EAAI8B,OAAOC,IAAIE,MAChD,IAD4DjC,EAAI8B,OAAOC,IAAIG,QAE5E,QAA0B,IAAnBlC,EAAI8B,OAAOC,IAAIC,MAA+B,IAAnBhC,EAAI8B,OAAOC,IAAIE,MAChD,IAD4DjC,EAAI8B,OAAOC,IAAIG,SAE7E,IAAM,EAAE,IAAM,EAAE,KAAO,IAAK,MAAQlC,EAAImC,MAAM,gBAAiB,GAAO5B,GAAG,CAAC,MAAQ,SAASG,GAAQ,OAAOV,EAAIoC,YAAYpC,EAAImC,SAASV,MAAM,CAACC,MAAO1B,EAAImC,MAAOR,SAAS,SAAUC,GAAM5B,EAAImC,MAAMP,GAAKC,WAAW,YAAY,GAAG3B,EAAG,MAAM,CAACE,YAAY,yBAAyB,CAACF,EAAG,SAAS,CAACmC,WAAW,CAAC,CAACC,KAAK,QAAQC,QAAQ,YAAYnC,YAAY,YAAYC,MAAM,CAAC,KAAO,SAAS,MAAQ,UAAUE,GAAG,CAAC,MAAQP,EAAIwC,eAAe,CAACtC,EAAG,IAAI,CAACE,YAAY,mBAAmBF,EAAG,WAAW,CAACE,YAAY,8BAA8BC,MAAM,CAAC,MAAQL,EAAIyC,cAAclC,GAAG,CAAC,MAAQ,SAASG,GAAQ,OAAOV,EAAI0C,iBAAiBhC,OAAYR,EAAG,SAAS,CAACmC,WAAW,CAAC,CAACC,KAAK,QAAQC,QAAQ,YAAYnC,YAAY,YAAYC,MAAM,CAAC,KAAO,SAAS,MAAQ,cAAcE,GAAG,CAAC,MAAQP,EAAI2C,cAAc,CAACzC,EAAG,IAAI,CAACE,YAAY,iBAAiB,GAAIJ,EAAI4C,YAAa,CAAC1C,EAAG,MAAM,CAACE,YAAY,uBAAuB,CAACJ,EAAI6C,GAAI7C,EAAI8C,UAAU,SAASC,GAAK,OAAO7C,EAAG,IAAI,CAACY,IAAIiC,EAAI3C,YAAY,6BAA6B4C,MAAQ,UAASD,EAAO1C,MAAM,CAAC,KAAO,SAAS,KAAO,KAAKE,GAAG,CAAC,MAAQ,SAASG,GAAgC,OAAxBA,EAAOuC,iBAAwBjD,EAAI0C,iBAAiBK,UAAW7C,EAAG,IAAI,CAACE,YAAY,0CAA0CC,MAAM,CAAC,KAAO,SAAS,KAAO,KAAKE,GAAG,CAAC,MAAQ,SAASG,GAAgC,OAAxBA,EAAOuC,iBAAwBjD,EAAIkD,QAAQC,MAAM,KAAMC,gBAAgB,GAAGlD,EAAG,MAAM,CAACE,YAAY,uBAAuBJ,EAAI6C,GAAI7C,EAAIqD,cAAc,SAASN,GAAK,OAAO7C,EAAG,IAAI,CAACY,IAAIiC,EAAI3C,YAAY,6BAA6B4C,MAAQ,UAASD,EAAO1C,MAAM,CAAC,KAAO,SAAS,KAAO,KAAKE,GAAG,CAAC,MAAQ,SAASG,GAAgC,OAAxBA,EAAOuC,iBAAwBjD,EAAI0C,iBAAiBK,UAAW,IAAI/C,EAAIsD,MAAM,IAE7nDC,EAAkB,G,4DCoChB,SAAUC,EAAM9B,EAAO+B,EAAmB,GAC9C,OAAO/B,EACJgC,QAAQD,GACRE,QAAQ,MAAO,IACfA,QAAQ,MAAO,IAWd,SAAUC,EAAgBC,GAC9B,MAAMC,EAAiBD,EAAIF,QAAQ,KAAM,IAEnCI,EAAW,GAIXC,EAAOF,EAAeG,OAAS,EAAI,EAAI,EAC7C,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAeG,OAAQC,GAAKF,EAAM,CACpD,MAAMG,EAAUL,EAAeM,MAAMF,EAAGA,EAAIF,GAE5CD,EAASM,KAAKF,EAAQG,OAAQN,EAAO,EAAK,IAGpB,IAApBD,EAASE,QACXF,EAASM,KAAK,MAIhB,MAAME,EAA8DR,EAASS,IAC3EL,GAAWM,SAASN,EAAS,IAAM,KAGrC,MAAO,CACLnC,EAAGuC,EAAY,GACftC,EAAGsC,EAAY,GACfrC,EAAGqC,EAAY,GACfG,EAAGH,EAAY,IAYb,SAAUI,EAAgBC,GAC9B,MAAMC,EAAID,EAAIE,EAAIF,EAAIG,EAAIC,KAAKC,IAAIL,EAAIE,EAAG,EAAIF,EAAIE,GAC5CC,EAAU,IAANF,EAAU,EAAI,EAAK,EAAID,EAAIE,EAAKD,EAE1C,MAAO,CACLK,EAAGN,EAAIM,EACPH,IACAF,IACAH,EAAGE,EAAIF,GAUX,SAASS,EAAQC,EAAGC,EAAGC,GAOrB,OANIA,EAAI,EACNA,GAAK,EACIA,EAAI,IACbA,GAAK,GAGHA,EAAI,EAAI,EACHF,EAAc,GAATC,EAAID,GAASE,EAChBA,EAAI,GACND,EACEC,EAAI,EAAI,EACVF,GAAKC,EAAID,IAAM,EAAI,EAAIE,GAAK,EAE5BF,EAYL,SAAUG,EAAgBX,GAC9B,MAAMS,EAAIT,EAAIE,EAAI,GAAMF,EAAIE,GAAK,EAAIF,EAAIG,GAAKH,EAAIE,EAAIF,EAAIG,EAAIH,EAAIE,EAAIF,EAAIG,EACpEK,EAAI,EAAIR,EAAIE,EAAIO,EAEtB,MAAO,CACLrD,EAAGmD,EAAQC,EAAGC,EAAGT,EAAIM,EAAI,EAAI,GAC7BjD,EAAGkD,EAAQC,EAAGC,EAAGT,EAAIM,GACrBhD,EAAGiD,EAAQC,EAAGC,EAAGT,EAAIM,EAAI,EAAI,GAC7BR,EAAGE,EAAIF,GAYL,SAAUc,EAAgBC,GAC9B,MAAMX,EAAIW,EAAIZ,EAAKY,EAAIZ,EAAIY,EAAIV,EAAK,EAC9BW,EAAOV,KAAKC,IAAIH,EAAG,EAAIA,GACvBC,EAAa,IAATW,EAAa,GAAKD,EAAIZ,EAAIC,GAAKY,EAEzC,MAAO,CACLR,EAAGO,EAAIP,EACPH,IACAD,IACAJ,EAAGe,EAAIf,GAUL,SAAUiB,EAAgBF,GAC9B,MAAO,CACLP,EAAGO,EAAIP,EACPU,GAAI,EAAIH,EAAIV,GAAKU,EAAIZ,EACrB3C,EAAG,EAAIuD,EAAIZ,EACXH,EAAGe,EAAIf,GASX,SAAS3D,EAAG8E,EAAGJ,GACb,MAAMK,GAAKD,EAAY,EAARJ,EAAIP,GAAS,EAC5B,OAAOO,EAAIZ,EAAIY,EAAIZ,EAAIY,EAAIV,EAAIC,KAAKe,IAAI,EAAGf,KAAKC,IAAIa,EAAG,EAAIA,EAAG,IAW1D,SAAUE,EAAgBP,GAC9B,MAAO,CACLzD,EAAGjB,EAAG,EAAG0E,GACTxD,EAAGlB,EAAG,EAAG0E,GACTvD,EAAGnB,EAAG,EAAG0E,GACTf,EAAGe,EAAIf,GAUL,SAAUuB,EAAgBC,GAC9B,MAAO,CACLhB,EAAGgB,EAAIhB,EACPH,EAAa,IAAVmB,EAAIhE,EAAU,EAAI,EAAIgE,EAAIN,GAAK,EAAIM,EAAIhE,GAC1C2C,EAAG,EAAIqB,EAAIhE,EACXwC,EAAGwB,EAAIxB,GAUL,SAAUyB,EAAgBpE,GAC9B,MAAMqE,EAAcC,OAAOC,OAAOvE,GAAKyC,IAAIL,IACzC,MAAMoC,EAAgB,IAAVpC,EACNN,EAAMmB,KAAKxB,MAAM+C,GAAKC,SAAS,IACrC,OAAsB,IAAf3C,EAAII,OAAe,IAAMJ,EAAMA,IAGxC,MAAO,IAAMuC,EAAYK,KAAK,IAS1B,SAAUC,EAAgB3E,GAC9B,MAAMkD,EAAMD,KAAKC,IAAIlD,EAAIC,EAAGD,EAAIE,EAAGF,EAAIG,GACjC6D,EAAMf,KAAKe,IAAIhE,EAAIC,EAAGD,EAAIE,EAAGF,EAAIG,GAEvC,IAAIgD,EAeJ,OAbEA,EADEa,IAAQd,EACN,EACKc,IAAQhE,EAAIC,GAChB,GAAKD,EAAIE,EAAIF,EAAIG,IAAM6D,EAAMd,IAAQ,EACjCc,IAAQhE,EAAIE,GAChB,GAAKF,EAAIG,EAAIH,EAAIC,IAAM+D,EAAMd,IAAQ,GAErC,GAAKlD,EAAIC,EAAID,EAAIE,IAAM8D,EAAMd,IAAQ,EAGxCC,EAAI,IACNA,GAAK,GAGA,CACLA,IACAU,EAAGX,EACH/C,EAAG,EAAI6D,EACPrB,EAAG3C,EAAI2C,GAYL,SAAUiC,EAAgB5E,GAC9B,MAAMmE,EAAMQ,EAAgB3E,GACtBkD,EAAMiB,EAAIN,EACVG,EAAM,EAAIG,EAAIhE,EAEd4C,GAAKiB,EAAMd,GAAO,EAExB,IAAIF,EAOJ,OALEA,EADU,IAARgB,GAAqB,IAARd,EACX,GAECc,EAAMjB,GAAKE,KAAKC,IAAIH,EAAG,EAAIA,GAG3B,CACLI,EAAGgB,EAAIhB,EACPH,IACAD,IACAJ,EAAG3C,EAAI2C,GAcL,SAAUkC,EAAMlF,EAAOuD,EAAKc,GAChC,OAAOf,KAAKe,IAAId,EAAKD,KAAKC,IAAIvD,EAAOqE,IAOjC,SAAUc,EAAWnF,GACzB,OAAO8B,EAAc,IAAR9B,GAUT,SAAUoF,EAAoBC,EAAQC,GAC1C,GAAsB,kBAAXD,GAAyC,kBAAXC,EACvC,OAAOD,IAAWC,EAGpB,IAAK,MAAMC,KAAYF,EACrB,GAAIA,EAAOE,KAAcD,EAAOC,GAC9B,OAAO,EAIX,OAAO,EAYT,SAASC,EAAaC,EAAaC,GACjC,OAAOA,EAAiBC,OACtB,CAACC,EAAOC,IAAYA,EAAQD,GAC5BH,GASE,SAAUK,EAAgBF,GACb,MAAMG,EAAW,GAElC,IAAK,MAAMC,KAAQJ,EACjBG,EAASC,GAAQJ,EAAMI,GAGzB,OAAOD,EAOH,SAAUE,EAAajG,GAC3B,GAAIA,EAAMkG,SAAS,KACjB,OAAOC,IAIT,MAAMC,GAAeC,WAAWrG,GAAS,IAAO,KAAO,IAEvD,OAAOoG,EAAa,IAOhB,SAAUE,EAAetG,GAC7B,IAAKA,EAAMkG,SAAS,KAClB,OAAOC,IAGT,MAAMI,EAAevG,EAAMwG,UAAU,EAAGxG,EAAMuC,OAAS,GAEvD,GAAIgE,EAAaL,SAAS,KACxB,OAAOC,IAGT,MAAMM,EAAcJ,WAAWE,GAE/B,OAAIG,OAAOC,MAAMF,GACRN,IAGFjB,EAAMuB,EAAa,EAAG,KAAO,IAOhC,SAAUG,EAAa5G,GAC3B,OAAO8B,EAAc,IAAR9B,GAAe,IAOxB,SAAU6G,EAAgB7G,GAC9B,GAAIA,EAAMkG,SAAS,KACjB,OAAOI,EAAetG,GAGxB,GAAIA,EAAMkG,SAAS,KACjB,OAAOC,IAGT,MAAMM,EAAcJ,WAAWrG,GAE/B,OAAI0G,OAAOC,MAAMF,GACRN,IAGFjB,EAAMuB,EAAa,EAAG,KAAO,IAOhC,SAAUK,EAAc9G,GAC5B,OAAO8B,EAAc,IAAR9B,GAOT,SAAU+G,EAAU/G,GACxB,OAAIA,EAAMkG,SAAS,KACVI,EAAetG,GAEfkF,EAAMmB,WAAWrG,GAAQ,EAAG,GAQjC,SAAUgH,EAAQhH,GACtB,OAAOiH,OAAOjH,GAWV,SAAUkH,EAAatB,GAC3B,OAAIjB,OAAOwC,UAAUC,eAAeC,KAAKzB,EAAO,KACvC,MACEjB,OAAOwC,UAAUC,eAAeC,KAAKzB,EAAO,KAC9C,MACEjB,OAAOwC,UAAUC,eAAeC,KAAKzB,EAAO,KAC9C,MAEA,MAaX,MAAM0B,EAAa,CAMjBnF,IAAIA,EAAKoF,GACP,OAAOA,GAAuB,CAAC,EAAG,GAAGC,SAASrF,EAAII,QAC9CJ,EAAIqE,UAAU,EAAGrE,EAAII,QAAUJ,EAAII,OAAS,GAAK,GACjDJ,GAQNe,IAAIA,EAAKqE,GACP,MAAM/D,EAAIF,KAAKxB,MAAc,IAARoB,EAAIM,GACnBH,EAAIC,KAAKxB,MAAc,IAARoB,EAAIG,GACnBD,EAAIE,KAAKxB,MAAc,IAARoB,EAAIE,GACzB,MACE,MAAOmE,GAAiC,IAAVrE,EAAIF,EAAgB,GAAN,OAAYQ,KAAKH,MAAMD,MACjEmE,GAAiC,IAAVrE,EAAIF,EAAgC,IAAtB,IAAIlB,EAAMoB,EAAIF,QASzDwB,IAAIA,EAAK+C,GACP,MAAM/D,EAAI1B,EAAc,IAAR0C,EAAIhB,GACdU,EAAIpC,EAAc,IAAR0C,EAAIN,GACd1D,EAAIsB,EAAc,IAAR0C,EAAIhE,GAEpB,MACE,OAAOgD,KAAKU,MAAM1D,MACjB+G,EAAsB,IAAM,MAAMzF,EAAM0C,EAAIxB,QASjD3C,IAAIA,EAAKkH,GACP,MAAMjH,EAAIgD,KAAKxB,MAAc,IAARzB,EAAIC,GACnBC,EAAI+C,KAAKxB,MAAc,IAARzB,EAAIE,GACnBC,EAAI8C,KAAKxB,MAAc,IAARzB,EAAIG,GAEzB,MAAO,MACK,IAAVH,EAAI2C,GAAYuE,EAA4B,GAAN,OACpCjH,KAAKC,KAAKC,IACF,IAAVH,EAAI2C,GAAYuE,EAA2C,GAArB,IAAIzF,EAAMzB,EAAI2C,QAapD,SAAUyE,EAAiB7B,EAAO8B,EAAQH,GAAsB,GACpE,OAAOD,EAAWI,GAAQ9B,EAAO2B,GAS7B,SAAUI,EAAgBC,GAC9B,QAAKA,EAASC,WAAW,SAIpB,CAAC,EAAG,EAAG,EAAG,GAAGL,SAASI,EAASrF,OAAS,IAItC,kBAAkBuF,KAAKF,IAMzB,MAAMG,EAAc,CACzB5F,IAAK,CACH,CAAC,MAAOA,GAAOqD,EAAarD,EAAK,CAACD,EAAiB+C,KACnD,CACE,MACA9C,GACEqD,EAAarD,EAAK,CAACD,EAAiB8C,EAAiBT,KAEzD,CAAC,MAAOpC,GAAOqD,EAAarD,EAAK,CAACD,EAAiB8C,KACnD,CAAC,MAAO9C,IAEVgB,IAAK,CACH,CAAC,MAAOA,GAAOsC,EAAatC,EAAK,CAACW,EAAiBY,KACnD,CAAC,MAAOxB,GACR,CAAC,MAAOC,GAAOsC,EAAatC,EAAK,CAACW,EAAiBmB,KACnD,CAAC,MAAOnB,IAEVE,IAAK,CACH,CAAC,MAAOA,GAAOyB,EAAazB,EAAK,CAACO,EAAiBG,KACnD,CAAC,MAAOX,GACR,CAAC,MAAOG,GACR,CAAC,MAAOK,IAEVE,IAAK,CACH,CACE,MACAA,GACEgB,EAAahB,EAAK,CAACD,EAAiBD,EAAiBG,KAEzD,CACE,MACAD,GACEgB,EAAahB,EAAK,CAACD,EAAiBD,EAAiBW,KAEzD,CAAC,MAAOV,GACR,CAAC,MAAOC,GAAOgB,EAAahB,EAAK,CAACD,EAAiBD,MAErDjE,IAAK,CACH,CAAC,MAAOoE,GACR,CAAC,MAAOQ,GACR,CAAC,MAAO5E,GAAOmF,EAAanF,EAAK,CAAC2E,EAAiBT,KACnD,CAAC,MAAOS,KAKCgD,EAAgB,CAC3B9E,IAAK,CACHM,EAAG,CACDyE,GAAI9C,EACJ+C,KAAMjC,GAGR5C,EAAG,CACD4E,GAAIrB,EACJsB,KAAM5B,GAGRlD,EAAG,CACD6E,GAAIrB,EACJsB,KAAM5B,GAGRtD,EAAG,CACDiF,GAAIjB,EACJkB,KAAMnB,IAIVvC,IAAK,CACHhB,EAAG,CACDyE,GAAI9C,EACJ+C,KAAMjC,GAGR/B,EAAG,CACD+D,GAAIrB,EACJsB,KAAM5B,GAGR9F,EAAG,CACDyH,GAAIrB,EACJsB,KAAM5B,GAGRtD,EAAG,CACDiF,GAAIjB,EACJkB,KAAMnB,IAIV1G,IAAK,CACHC,EAAG,CACD2H,GAAInB,EACJoB,KAAMrB,GAGRtG,EAAG,CACD0H,GAAInB,EACJoB,KAAMrB,GAGRrG,EAAG,CACDyH,GAAInB,EACJoB,KAAMrB,GAGR7D,EAAG,CACDiF,GAAIjB,EACJkB,KAAMnB,KAaN,SAAUoB,EAAgBC,GAC9B,GAA0B,kBAAfA,EAAyB,CAClC,MAAMV,EAASR,EAAakB,GAC5B,MAAO,CAAEV,SAAQ9B,MAAOwC,GAG1B,GAAIT,EAAgBS,GAClB,MAAO,CAAEV,OAAQ,MAAO9B,MAAOwC,GAGjC,IAAKA,EAAWZ,SAAS,KAAM,CAC7B,MAAMa,EAAkDC,SACrDC,cAAc,UACdC,WAAW,MACdH,EAAQI,UAAYL,EACpB,MAAMxC,EAAQyC,EAAQI,UAGtB,MAAc,YAAV7C,GAAsC,UAAfwC,EAClB,KAGF,CAAEV,OAAQ,MAAO9B,SAI1B,MAAO8C,EAAWC,GAAwCP,EAAWQ,MACnE,KAEIlB,EAAoCgB,EAAUlC,UAAU,EAAG,GAC3DqC,EAAaF,EAEhB1G,QAAQ,SAAU,KAElBA,QAAQ,OAAQ,KAChB6G,OACAF,MAAM,KAGiB,IAAtBC,EAAWtG,QACbsG,EAAWlG,KAAK,KAGlB,MAAMN,EAAWqF,EAAOkB,MAAM,IAAIG,OAAO,KACnCnD,EAAiEjB,OAAOqE,YAC5E3G,EAASS,IAAI,CAACL,EAASwG,IAAU,CAC/BxG,EACAuF,EAAcN,GAAQjF,GAASyF,KAAKW,EAAWI,OAInD,MAAO,CAAEvB,SAAQ9B,SCrpBnB,MAAMsD,EAA0B,CAAC,MAAO,MAAO,OAgBhC,OACftI,yBACAuI,gBACAC,YACAC,cACAC,eAEAC,OACAvJ,OACAwJ,YACAC,gBAEAjK,OACAgK,YACAC,wBAEAC,cACAF,YACAC,eAEAvI,aACAsI,aACAC,YAEAE,WACAH,aACAC,aAGAG,WACAxJ,QACA+B,gBACAe,KAAAM,IAAAH,IAAAD,IAAAJ,KACAe,KAAAP,IAAAH,IAAAF,IAAAH,KACA3C,KAAAC,IAAAC,IAAAC,IAAAwC,MAEA6G,mBACAlI,gBACAmI,oBACAhK,SACAW,UAEAsJ,UACA3I,oBACAxC,cACA,uCAEA,yBAEA,UAEAmC,eACA,yCACA,wBAGA,uCAEA,yBAEA,UAEAiJ,kBACA,oDACA,iDAGAC,UACAC,4BACAC,kDAGA,0CACA,sCAGAC,UACA,SAAAC,YACA/B,iEACAA,iEACAA,4DACAA,2DAEA,gCAGAgC,gBACAhC,kEACAA,kEACAA,6DACAA,+DAEAiC,SAKAvJ,yBACA,YACA,OAGA,aAEA,2BAEA,UACA,mCAMArB,6BACA,yBACA,4BAMAC,6BACA,yBACA,4BAMA4K,sBACA,2CAIA,qCAMAC,sBACA,8BACA,OAGA,QAAAC,aACA,qCAOAC,eACA,sCACA,qBACAC,QACAA,QACA,wBAGAC,kBACA,0BASAC,yBACA,kDACA,WACA,UACA,GACAC,mBACAC,uBAGA,UAMAC,qBACA,sBACA,iCAGA,+BACA,6BAEA,gCAQAC,kBACA,kBAEA,OACA9K,SACA+K,aASAC,gBACA,QAEA,0BACA,iBACA,2BAEA,IACA,QACA,qDACA,wBAKAC,sBACA,mCAIAnB,oBACA,0BAEA,6BACAA,gDAGApJ,eACA,oBACA4G,0BAGA,EACA4D,eACA,EACAA,IAEA,wBAEArK,cACA,0CAEApB,aACA,2BACA+K,UAEA,wBAEAlK,eACA,2BACAkK,MAEA,wBAEAW,uBACA,oBACA,wBAGAC,gBACA,WAIA,2DACA,2DACA,2DACA,2DACA,+BACA,QACA,sQASA,8BACA,QACA,qEAG2B,IAAfpL,EAAO2D,IAAIV,+BACM,IAAfjD,EAAO2D,IAAIZ,sBAIzB3B,UACA,0CCtbyX,I,wBCQrXiK,EAAY,eACd,EACApN,EACAwD,GACA,EACA,KACA,WACA,MAIa,aAAA4J,E,6CCnBf,W","file":"js/chunk-3a77d76f.f83cb0e8.js","sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('Dialog',{staticClass:\"color-picker\",attrs:{\"mask\":false,\"header-background\":_vm.outputColor},on:{\"clickOutside\":_vm.close},nativeOn:{\"mousedown\":function($event){$event.stopPropagation();}},scopedSlots:_vm._u([{key:\"header\",fn:function(){return [_c('div',[_c('div',{staticClass:\"title\"},[_vm._v(_vm._s(_vm.label))])])]},proxy:true}])},[_c('div',{ref:\"canvas\",staticClass:\"color-picker-canvas\",on:{\"mousedown\":_vm.startMovingThumbWithMouse,\"touchstart\":_vm.startMovingThumbWithTouch}},[_c('div',{ref:\"thumb\",staticClass:\"color-picker-canvas__thumb\",attrs:{\"tabindex\":\"0\",\"aria-label\":\"Color space thumb\"}})]),_c('div',{staticClass:\"color-picker-sliders\"},[_c('slider',{staticClass:\"color-picker-sliders__hue\",attrs:{\"showCompletion\":false,\"gradient\":['#f00', '#ff0', '#0f0', '#0ff', '#00f', '#f0f', '#f00'],\"max\":360},on:{\"input\":function($event){return _vm.updateHue(_vm.hue)}},model:{value:(_vm.hue),callback:function ($$v) {_vm.hue=$$v},expression:\"hue\"}}),_c('slider',{staticClass:\"color-picker-sliders__alpha -alpha\",attrs:{\"gradient\":[\n        `rgba(${_vm.colors.rgb.r * 255}, ${_vm.colors.rgb.g * 255}, ${_vm.colors.rgb.b *\n          255}, 0)`,\n        `rgba(${_vm.colors.rgb.r * 255}, ${_vm.colors.rgb.g * 255}, ${_vm.colors.rgb.b *\n          255}, 1)`\n      ],\"min\":0,\"max\":1,\"step\":0.01,\"value\":_vm.alpha,\"showCompletion\":false},on:{\"input\":function($event){return _vm.updateAlpha(_vm.alpha)}},model:{value:(_vm.alpha),callback:function ($$v) {_vm.alpha=$$v},expression:\"alpha\"}})],1),_c('div',{staticClass:\"color-picker-controls\"},[_c('button',{directives:[{name:\"tippy\",rawName:\"v-tippy\"}],staticClass:\"btn -text\",attrs:{\"type\":\"button\",\"title\":\"Rotate\"},on:{\"click\":_vm.switchFormat}},[_c('i',{staticClass:\"icon-refresh\"})]),_c('editable',{staticClass:\"form-control hide-scrollbar\",attrs:{\"value\":_vm.displayColor},on:{\"input\":function($event){return _vm.setColorFromProp($event)}}}),_c('button',{directives:[{name:\"tippy\",rawName:\"v-tippy\"}],staticClass:\"btn -text\",attrs:{\"type\":\"button\",\"title\":\"Save color\"},on:{\"click\":_vm.submitColor}},[_c('i',{staticClass:\"icon-save\"})])],1),(_vm.showPalette)?[_c('div',{staticClass:\"color-picker-colors\"},[_vm._l((_vm.swatches),function(clr){return _c('a',{key:clr,staticClass:\"color-picker-colors__color\",style:(`color: ${clr}`),attrs:{\"role\":\"button\",\"href\":\"#\"},on:{\"click\":function($event){$event.preventDefault();return _vm.setColorFromProp(clr)}}})}),_c('a',{staticClass:\"color-picker-colors__color -transparent\",attrs:{\"role\":\"button\",\"href\":\"#\"},on:{\"click\":function($event){$event.preventDefault();return _vm.setNull.apply(null, arguments)}}})],2),_c('div',{staticClass:\"color-picker-colors\"},_vm._l((_vm.recentColors),function(clr){return _c('a',{key:clr,staticClass:\"color-picker-colors__color\",style:(`color: ${clr}`),attrs:{\"role\":\"button\",\"href\":\"#\"},on:{\"click\":function($event){$event.preventDefault();return _vm.setColorFromProp(clr)}}})}),0)]:_vm._e()],2)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","export type VisibleColorFormat = 'hex' | 'hsl' | 'hwb' | 'rgb'\n\nexport type ColorFormat = 'hex' | 'hsl' | 'hsv' | 'hwb' | 'rgb'\n\nexport type ColorHsl = {\n  h: number\n  s: number\n  l: number\n  a: number\n}\n\nexport type ColorHsv = {\n  h: number\n  s: number\n  v: number\n  a: number\n}\n\nexport type ColorHwb = {\n  h: number\n  w: number\n  b: number\n  a: number\n}\n\nexport type ColorRgb = {\n  r: number\n  g: number\n  b: number\n  a: number\n}\n\nexport type AlphaChannelProp = 'show' | 'hide'\n\n/**\n * Rounds a given number to a certain level of precision after the decimal point.\n *\n * The default decimal precision is 2 (e.g. the value `10.333` would result in `'10.33'`).\n *\n * @param {number} value\n * @param {number} [decimalPrecision]\n * @returns {string}\n */\nexport function round(value, decimalPrecision = 2) {\n  return value\n    .toFixed(decimalPrecision)\n    .replace(/0+$/, '')\n    .replace(/\\.$/, '')\n}\n\n/**\n * Converts a HEX color string to an RGB color object.\n *\n * Supports HEX color strings with length 3, 4, 6, and 8.\n *\n * @param {string} hex\n * @returns {ColorRgb}\n */\nexport function convertHexToRgb(hex) {\n  const hexWithoutHash = hex.replace(/^#/, '')\n\n  const channels = []\n\n  // Slice hex color string into two characters each.\n  // For longhand hex color strings, two characters can be consumed at a time.\n  const step = hexWithoutHash.length > 4 ? 2 : 1\n  for (let i = 0; i < hexWithoutHash.length; i += step) {\n    const channel = hexWithoutHash.slice(i, i + step)\n    // Repeat the character once for shorthand hex color strings.\n    channels.push(channel.repeat((step % 2) + 1))\n  }\n\n  if (channels.length === 3) {\n    channels.push('ff')\n  }\n\n  // Okay, TypeScript, let’s agree that we got four elements in that array, alright?\n  const rgbChannels = /** @type {[number, number, number, number]} */ channels.map(\n    channel => parseInt(channel, 16) / 255\n  )\n\n  return {\n    r: rgbChannels[0],\n    g: rgbChannels[1],\n    b: rgbChannels[2],\n    a: rgbChannels[3]\n  }\n}\n\n/**\n * Converts an HSL color object to an HSV color object.\n *\n * Source: https://en.m.wikipedia.org/wiki/HSL_and_HSV#HSL_to_HSV\n *\n * @param {ColorHsl} hsl\n * @returns {ColorHsv}\n */\nexport function convertHslToHsv(hsl) {\n  const v = hsl.l + hsl.s * Math.min(hsl.l, 1 - hsl.l)\n  const s = v === 0 ? 0 : 2 - (2 * hsl.l) / v\n\n  return {\n    h: hsl.h,\n    s,\n    v,\n    a: hsl.a\n  }\n}\n\n/**\n * @param {number} p\n * @param {number} q\n * @param {number} t\n * @returns {number}\n */\nfunction hue2rgb(p, q, t) {\n  if (t < 0) {\n    t += 1\n  } else if (t > 1) {\n    t -= 1\n  }\n\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t\n  } else if (t < 1 / 2) {\n    return q\n  } else if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6\n  } else {\n    return p\n  }\n}\n\n/**\n * Converts an HSL color object to an RGB color object.\n *\n * Source: https://en.m.wikipedia.org/wiki/HSL_and_HSV#HSL_to_RGB\n *\n * @param {ColorHsl} hsl\n * @returns {ColorRgb}\n */\nexport function convertHslToRgb(hsl) {\n  const q = hsl.l < 0.5 ? hsl.l * (1 + hsl.s) : hsl.l + hsl.s - hsl.l * hsl.s\n  const p = 2 * hsl.l - q\n\n  return {\n    r: hue2rgb(p, q, hsl.h + 1 / 3),\n    g: hue2rgb(p, q, hsl.h),\n    b: hue2rgb(p, q, hsl.h - 1 / 3),\n    a: hsl.a\n  }\n}\n\n/**\n * Converts an HSV color object to an HSL color object.\n *\n * Source: https://en.m.wikipedia.org/wiki/HSL_and_HSV#HSV_to_HSL\n *\n * @param {ColorHsv} hsv\n * @returns {ColorHsl}\n */\nexport function convertHsvToHsl(hsv) {\n  const l = hsv.v - (hsv.v * hsv.s) / 2\n  const lMin = Math.min(l, 1 - l)\n  const s = lMin === 0 ? 0 : (hsv.v - l) / lMin\n\n  return {\n    h: hsv.h,\n    s,\n    l,\n    a: hsv.a\n  }\n}\n\n/**\n * Converts an HSV color object to an HWB color object.\n *\n * @param {ColorHsv} hsv\n * @returns {ColorHwb}\n */\nexport function convertHsvToHwb(hsv) {\n  return {\n    h: hsv.h,\n    w: (1 - hsv.s) * hsv.v,\n    b: 1 - hsv.v,\n    a: hsv.a\n  }\n}\n\n/**\n * @param {number} n\n * @param {ColorHsv} hsv\n * @returns {number}\n */\nfunction fn(n, hsv) {\n  const k = (n + hsv.h * 6) % 6\n  return hsv.v - hsv.v * hsv.s * Math.max(0, Math.min(k, 4 - k, 1))\n}\n\n/**\n * Converts an HSV color object to an RGB color object.\n *\n * Source: https://en.m.wikipedia.org/wiki/HSL_and_HSV#HSL_to_RGB\n *\n * @param {ColorHsv} hsv\n * @returns {ColorRgb}\n */\nexport function convertHsvToRgb(hsv) {\n  return {\n    r: fn(5, hsv),\n    g: fn(3, hsv),\n    b: fn(1, hsv),\n    a: hsv.a\n  }\n}\n\n/**\n * Converts an HWB color object to an HSV color object.\n *\n * @param {ColorHwb} hwb\n * @returns {ColorHsv}\n */\nexport function convertHwbToHsv(hwb) {\n  return {\n    h: hwb.h,\n    s: hwb.b === 1 ? 0 : 1 - hwb.w / (1 - hwb.b),\n    v: 1 - hwb.b,\n    a: hwb.a\n  }\n}\n\n/**\n * Converts an RGB color object to an HEX color string.\n *\n * @param {ColorRgb} rgb\n * @returns {string}\n */\nexport function convertRgbToHex(rgb: ColorRgb) {\n  const hexChannels = Object.values(rgb).map(channel => {\n    const int = channel * 255\n    const hex = Math.round(int).toString(16)\n    return hex.length === 1 ? '0' + hex : hex\n  })\n\n  return '#' + hexChannels.join('')\n}\n\n/**\n * Converts an RGB color object to an HWB color object.\n *\n * @param {ColorRgb} rgb\n * @returns {ColorHwb}\n */\nexport function convertRgbToHwb(rgb) {\n  const min = Math.min(rgb.r, rgb.g, rgb.b)\n  const max = Math.max(rgb.r, rgb.g, rgb.b)\n\n  let h\n  if (max === min) {\n    h = 0\n  } else if (max === rgb.r) {\n    h = (0 + (rgb.g - rgb.b) / (max - min)) / 6\n  } else if (max === rgb.g) {\n    h = (2 + (rgb.b - rgb.r) / (max - min)) / 6\n  } else {\n    h = (4 + (rgb.r - rgb.g) / (max - min)) / 6\n  }\n\n  if (h < 0) {\n    h += 1\n  }\n\n  return {\n    h,\n    w: min,\n    b: 1 - max,\n    a: rgb.a\n  }\n}\n\n/**\n * Converts an RGB color object to an HSL color object.\n *\n * Source: https://en.m.wikipedia.org/wiki/HSL_and_HSV#RGB_to_HSL_and_HSV\n *\n * @param {ColorRgb} rgb\n * @returns {ColorHsl}\n */\nexport function convertRgbToHsl(rgb: ColorRgb): ColorHsl {\n  const hwb = convertRgbToHwb(rgb)\n  const min = hwb.w\n  const max = 1 - hwb.b\n\n  const l = (max + min) / 2\n\n  let s\n  if (max === 0 || min === 1) {\n    s = 0\n  } else {\n    s = (max - l) / Math.min(l, 1 - l)\n  }\n\n  return {\n    h: hwb.h,\n    s,\n    l,\n    a: rgb.a\n  }\n}\n\n/**\n * Clamps the given value between the min and max boundaries.\n *\n * @param {number} value\n * @param {number} min\n * @param {number} max\n * @returns {number} - `value` if `min <= value <= max`\n *                   - `min` if `value < min`\n *                   - `max` if `value > max`\n */\nexport function clamp(value, min, max) {\n  return Math.max(min, Math.min(value, max))\n}\n\n/**\n * @param {number} value in the range [0, 1]\n * @returns {string} in the range [0, 360]\n */\nexport function toHueAngle(value) {\n  return round(value * 360)\n}\n\n/**\n * Checks whether two objects are value equal.\n *\n * @param {string | { [key: string]: number }} colorA\n * @param {string | { [key: string]: number }} colorB\n * @returns {boolean}\n */\nexport function colorsAreValueEqual(colorA, colorB) {\n  if (typeof colorA === 'string' || typeof colorB === 'string') {\n    return colorA === colorB\n  }\n\n  for (const channelA in colorA) {\n    if (colorA[channelA] !== colorB[channelA]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * Takes a `color` and passes it through a list of conversion functions.\n *\n * This process is necessary when a direct conversion algorithm isn’t known/available for the conversion between two color formats. Then, several conversion functions are chained to get to the result in an indirect manner (e.g. to convert from RGB to HSV, we first convert from RGB to HWB and then from HWB to HSV).\n *\n * @param {any} sourceColor\n * @param {Function[]} convertFunctions\n * @returns {any}\n */\nfunction chainConvert(sourceColor, convertFunctions) {\n  return convertFunctions.reduce(\n    (color, convert) => convert(color),\n    sourceColor\n  )\n}\n\n/**\n * @param {T} color\n * @returns {T}\n * @template T\n */\nexport function copyColorObject(color) {\n  /** @type {T} */ const newColor = {}\n\n  for (const prop in color) {\n    newColor[prop] = color[prop]\n  }\n\n  return newColor\n}\n\n/**\n * @param {string} value a string representing an arbitrary number\n * @returns {number} in the range [0, 1]\n */\nexport function fromHueAngle(value) {\n  if (value.endsWith('.')) {\n    return NaN\n  }\n\n  // Maps the angle to the range [0, 360] (e.g. -30 becomes 330, 385 becomes 15, etc).\n  const boundAngle = ((parseFloat(value) % 360) + 360) % 360\n\n  return boundAngle / 360\n}\n\n/**\n * @param {string} value a string representing an arbitrary percentage value\n * @returns {number} in the range [0, 1]\n */\nexport function fromPercentage(value) {\n  if (!value.endsWith('%')) {\n    return NaN\n  }\n\n  const numberString = value.substring(0, value.length - 1)\n\n  if (numberString.endsWith('.')) {\n    return NaN\n  }\n\n  const numberValue = parseFloat(numberString)\n\n  if (Number.isNaN(numberValue)) {\n    return NaN\n  }\n\n  return clamp(numberValue, 0, 100) / 100\n}\n\n/**\n * @param {number} value in the range [0, 1]\n * @returns {string} in the range [0%, 100%]\n */\nexport function toPercentage(value) {\n  return round(value * 100) + '%'\n}\n\n/**\n * @param {string} value a string representing an arbitrary number value\n * @returns {number} in the range [0, 1]\n */\nexport function from8BitDecimal(value) {\n  if (value.endsWith('%')) {\n    return fromPercentage(value)\n  }\n\n  if (value.endsWith('.')) {\n    return NaN\n  }\n\n  const numberValue = parseFloat(value)\n\n  if (Number.isNaN(numberValue)) {\n    return NaN\n  }\n\n  return clamp(numberValue, 0, 255) / 255\n}\n\n/**\n * @param {number} value in the range [0, 1]\n * @returns {string} in the range [0, 255]\n */\nexport function to8BitDecimal(value) {\n  return round(value * 255)\n}\n\n/**\n * @param {string} value in the range [0, 1] or [0%, 100%]\n * @returns {number} in the range [0, 1]\n */\nexport function fromAlpha(value) {\n  if (value.endsWith('%')) {\n    return fromPercentage(value)\n  } else {\n    return clamp(parseFloat(value), 0, 1)\n  }\n}\n\n/**\n * @param {number} value in the range [0, 1]\n * @returns {string} in the range [0, 1]\n */\nexport function toAlpha(value) {\n  return String(value)\n}\n\n/**\n * Lazy function that returns the format of a given color object.\n *\n * Doesn’t handle invalid formats.\n *\n * @param {ColorHsl | ColorHsv | ColorHwb | ColorRgb} color\n * @returns {ColorFormat}\n */\nexport function detectFormat(color) {\n  if (Object.prototype.hasOwnProperty.call(color, 'r')) {\n    return 'rgb'\n  } else if (Object.prototype.hasOwnProperty.call(color, 'w')) {\n    return 'hwb'\n  } else if (Object.prototype.hasOwnProperty.call(color, 'v')) {\n    return 'hsv'\n  } else {\n    return 'hsl'\n  }\n}\n\n/**\n * @typedef {Object} Formatters\n * @property {(color: string, excludeAlphaChannel: boolean) => string} hex\n * @property {(color: ColorHsl, excludeAlphaChannel: boolean) => string} hsl\n * @property {(color: ColorHwb, excludeAlphaChannel: boolean) => string} hwb\n * @property {(color: ColorRgb, excludeAlphaChannel: boolean) => string} rgb\n */\n\n/** @type {Formatters} */\nconst formatters = {\n  /**\n   * @param {string} hex\n   * @param {boolean} excludeAlphaChannel\n   * @returns {string}\n   */\n  hex(hex, excludeAlphaChannel) {\n    return excludeAlphaChannel && [5, 9].includes(hex.length)\n      ? hex.substring(0, hex.length - (hex.length - 1) / 4)\n      : hex\n  },\n\n  /**\n   * @param {ColorHsl} hsl\n   * @param {boolean} excludeAlphaChannel\n   * @returns {string}\n   */\n  hsl(hsl, excludeAlphaChannel) {\n    const h = Math.round(hsl.h * 360)\n    const s = Math.round(hsl.s * 100)\n    const l = Math.round(hsl.l * 100)\n    return (\n      `hsl${!excludeAlphaChannel && hsl.a !== 1 ? 'a' : ''}(${h},${s}%,${l}%` +\n      (!excludeAlphaChannel && hsl.a !== 1 ? `,${round(hsl.a)})` : ')')\n    )\n  },\n\n  /**\n   * @param {ColorHwb} hwb\n   * @param {boolean} excludeAlphaChannel\n   * @returns {string}\n   */\n  hwb(hwb, excludeAlphaChannel) {\n    const h = round(hwb.h * 360)\n    const w = round(hwb.w * 100)\n    const b = round(hwb.b * 100)\n\n    return (\n      `hwb(${h} ${w}% ${b}%` +\n      (excludeAlphaChannel ? ')' : ` / ${round(hwb.a)})`)\n    )\n  },\n\n  /**\n   * @param {ColorRgb} rgb\n   * @param {boolean} excludeAlphaChannel\n   * @returns {string}\n   */\n  rgb(rgb, excludeAlphaChannel) {\n    const r = Math.round(rgb.r * 255)\n    const g = Math.round(rgb.g * 255)\n    const b = Math.round(rgb.b * 255)\n\n    return `rgb${\n      rgb.a !== 1 && !excludeAlphaChannel ? 'a' : ''\n    }(${r},${g},${b}${\n      rgb.a !== 1 && !excludeAlphaChannel ? `,${round(rgb.a)}` : ''\n    })`\n  }\n}\n\n/**\n * Formats a given color object as a CSS color string.\n *\n * @param {string | ColorHsl | ColorHwb | ColorRgb} color\n * @param {VisibleColorFormat} format\n * @param {boolean} excludeAlphaChannel\n * @returns {string}\n */\nexport function formatAsCssColor(color, format, excludeAlphaChannel = false) {\n  return formatters[format](color, excludeAlphaChannel)\n}\n\n/**\n * Returns whether a given HEX color string is a valid CSS color.\n *\n * @param {string} hexColor\n * @returns {boolean}\n */\nexport function isValidHexColor(hexColor) {\n  if (!hexColor.startsWith('#')) {\n    return false\n  }\n\n  if (![3, 4, 6, 8].includes(hexColor.length - 1)) {\n    return false\n  }\n\n  return /^#[0-9A-Fa-f]+$/.test(hexColor)\n}\n\n/**\n * @type {{ [key in ColorFormat]: Array<[ColorFormat, (color: any) => any]> }}\n */\nexport const conversions = {\n  hex: [\n    ['hsl', hex => chainConvert(hex, [convertHexToRgb, convertRgbToHsl])],\n    [\n      'hsv',\n      hex =>\n        chainConvert(hex, [convertHexToRgb, convertRgbToHwb, convertHwbToHsv])\n    ],\n    ['hwb', hex => chainConvert(hex, [convertHexToRgb, convertRgbToHwb])],\n    ['rgb', convertHexToRgb]\n  ],\n  hsl: [\n    ['hex', hsl => chainConvert(hsl, [convertHslToRgb, convertRgbToHex])],\n    ['hsv', convertHslToHsv],\n    ['hwb', hsl => chainConvert(hsl, [convertHslToRgb, convertRgbToHwb])],\n    ['rgb', convertHslToRgb]\n  ],\n  hsv: [\n    ['hex', hsv => chainConvert(hsv, [convertHsvToRgb, convertRgbToHex])],\n    ['hsl', convertHsvToHsl],\n    ['hwb', convertHsvToHwb],\n    ['rgb', convertHsvToRgb]\n  ],\n  hwb: [\n    [\n      'hex',\n      hwb =>\n        chainConvert(hwb, [convertHwbToHsv, convertHsvToRgb, convertRgbToHex])\n    ],\n    [\n      'hsl',\n      hwb =>\n        chainConvert(hwb, [convertHwbToHsv, convertHsvToRgb, convertRgbToHsl])\n    ],\n    ['hsv', convertHwbToHsv],\n    ['rgb', hwb => chainConvert(hwb, [convertHwbToHsv, convertHsvToRgb])]\n  ],\n  rgb: [\n    ['hex', convertRgbToHex],\n    ['hsl', convertRgbToHsl],\n    ['hsv', rgb => chainConvert(rgb, [convertRgbToHwb, convertHwbToHsv])],\n    ['hwb', convertRgbToHwb]\n  ]\n}\n\n/** @type {any} */\nexport const colorChannels = {\n  hsl: {\n    h: {\n      to: toHueAngle,\n      from: fromHueAngle\n    },\n\n    s: {\n      to: toPercentage,\n      from: fromPercentage\n    },\n\n    l: {\n      to: toPercentage,\n      from: fromPercentage\n    },\n\n    a: {\n      to: toAlpha,\n      from: fromAlpha\n    }\n  },\n\n  hwb: {\n    h: {\n      to: toHueAngle,\n      from: fromHueAngle\n    },\n\n    w: {\n      to: toPercentage,\n      from: fromPercentage\n    },\n\n    b: {\n      to: toPercentage,\n      from: fromPercentage\n    },\n\n    a: {\n      to: toAlpha,\n      from: fromAlpha\n    }\n  },\n\n  rgb: {\n    r: {\n      to: to8BitDecimal,\n      from: from8BitDecimal\n    },\n\n    g: {\n      to: to8BitDecimal,\n      from: from8BitDecimal\n    },\n\n    b: {\n      to: to8BitDecimal,\n      from: from8BitDecimal\n    },\n\n    a: {\n      to: toAlpha,\n      from: fromAlpha\n    }\n  }\n}\n\n/**\n * Parses a color as it can be provided to the color picker’s `color` prop.\n *\n * Supports all valid CSS colors in string form (e.g. tomato, #f80c, hsl(266.66 50% 100% / 0.8), hwb(0.9 0.9 0.9 / 1), etc.) as well as the color formats used for internal storage by the color picker.\n *\n * @param {string | ColorHsl | ColorHsv | ColorHwb | ColorRgb} propsColor\n * @returns {{ format: ColorFormat, color: string | ColorHsl | ColorHsv | ColorHwb | ColorRgb } | null}\n */\nexport function parsePropsColor(propsColor) {\n  if (typeof propsColor !== 'string') {\n    const format = detectFormat(propsColor)\n    return { format, color: propsColor }\n  }\n\n  if (isValidHexColor(propsColor)) {\n    return { format: 'hex', color: propsColor }\n  }\n\n  if (!propsColor.includes('(')) {\n    const context = /** @type {CanvasRenderingContext2D} */ document\n      .createElement('canvas')\n      .getContext('2d')\n    context.fillStyle = propsColor\n    const color = context.fillStyle\n\n    // Invalid color names yield `'#000000'` which we only know to have come from an invalid color name if it was *not* `'black'`\n    if (color === '#000000' && propsColor !== 'black') {\n      return null\n    }\n\n    return { format: 'hex', color }\n  }\n\n  // Split a color string like `rgba(255 255 128 / .5)` into `rgba` and `255 255 128 / .5)`.\n  const [cssFormat, rest] = /** @type {[string, string]} */ propsColor.split(\n    '('\n  )\n  const format = /** @type {ColorFormat} */ cssFormat.substring(0, 3)\n  const parameters = rest\n    // Replace all characters that aren’t needed any more, leaving a string like `255 255 128 .5`.\n    .replace(/[,/)]/g, ' ')\n    // Replace consecutive spaces with one space.\n    .replace(/\\s+/g, ' ')\n    .trim()\n    .split(' ')\n\n  // Normalize color to always have an alpha channel in its internal representation.\n  if (parameters.length === 3) {\n    parameters.push('1')\n  }\n\n  const channels = format.split('').concat('a')\n  const color = /** @type {ColorHsl | ColorHsv | ColorHwb | ColorRgb} */ Object.fromEntries(\n    channels.map((channel, index) => [\n      channel,\n      colorChannels[format][channel].from(parameters[index])\n    ])\n  )\n\n  return { format, color }\n}\n","<template>\n  <Dialog\n    @mousedown.native.stop\n    @clickOutside=\"close\"\n    class=\"color-picker\"\n    :mask=\"false\"\n    :header-background=\"outputColor\"\n  >\n    <template v-slot:header>\n      <div>\n        <div class=\"title\">{{ label }}</div>\n      </div>\n    </template>\n    <div\n      ref=\"canvas\"\n      class=\"color-picker-canvas\"\n      @mousedown=\"startMovingThumbWithMouse\"\n      @touchstart=\"startMovingThumbWithTouch\"\n    >\n      <div\n        ref=\"thumb\"\n        class=\"color-picker-canvas__thumb\"\n        tabindex=\"0\"\n        aria-label=\"Color space thumb\"\n      />\n    </div>\n    <div class=\"color-picker-sliders\">\n      <slider\n        class=\"color-picker-sliders__hue\"\n        :showCompletion=\"false\"\n        :gradient=\"['#f00', '#ff0', '#0f0', '#0ff', '#00f', '#f0f', '#f00']\"\n        :max=\"360\"\n        v-model=\"hue\"\n        @input=\"updateHue(hue)\"\n      ></slider>\n      <slider\n        class=\"color-picker-sliders__alpha -alpha\"\n        :gradient=\"[\n          `rgba(${colors.rgb.r * 255}, ${colors.rgb.g * 255}, ${colors.rgb.b *\n            255}, 0)`,\n          `rgba(${colors.rgb.r * 255}, ${colors.rgb.g * 255}, ${colors.rgb.b *\n            255}, 1)`\n        ]\"\n        :min=\"0\"\n        :max=\"1\"\n        :step=\"0.01\"\n        :value=\"alpha\"\n        :showCompletion=\"false\"\n        v-model=\"alpha\"\n        @input=\"updateAlpha(alpha)\"\n      >\n      </slider>\n    </div>\n    <div class=\"color-picker-controls\">\n      <button\n        class=\"btn -text\"\n        @click=\"switchFormat\"\n        type=\"button\"\n        title=\"Rotate\"\n        v-tippy\n      >\n        <i class=\"icon-refresh\"></i>\n      </button>\n      <editable\n        class=\"form-control hide-scrollbar\"\n        :value=\"displayColor\"\n        @input=\"setColorFromProp($event)\"\n      ></editable>\n      <button\n        class=\"btn -text\"\n        @click=\"submitColor\"\n        type=\"button\"\n        title=\"Save color\"\n        v-tippy\n      >\n        <i class=\"icon-save\"></i>\n      </button>\n    </div>\n    <template v-if=\"showPalette\">\n      <div class=\"color-picker-colors\">\n        <a\n          class=\"color-picker-colors__color\"\n          role=\"button\"\n          href=\"#\"\n          v-for=\"clr in swatches\"\n          :key=\"clr\"\n          :style=\"`color: ${clr}`\"\n          @click.prevent=\"setColorFromProp(clr)\"\n        >\n        </a>\n        <a\n          class=\"color-picker-colors__color -transparent\"\n          role=\"button\"\n          href=\"#\"\n          @click.prevent=\"setNull\"\n        >\n        </a>\n      </div>\n      <div class=\"color-picker-colors\">\n        <a\n          class=\"color-picker-colors__color\"\n          role=\"button\"\n          href=\"#\"\n          v-for=\"clr in recentColors\"\n          :key=\"clr\"\n          :style=\"`color: ${clr}`\"\n          @click.prevent=\"setColorFromProp(clr)\"\n        >\n        </a>\n      </div>\n    </template>\n  </Dialog>\n</template>\n\n<script>\n/* eslint-disable */\nconst ALLOWED_VISIBLE_FORMATS = ['hex', 'hsl', 'rgb']\nimport { PALETTE } from '@/utils/colors'\n\nimport Dialog from '@/components/framework/Dialog.vue'\nimport Slider from '@/components/framework/picker/Slider.vue'\nimport dialogMixin from '../../../mixins/dialogMixin'\nimport workspacesService from '@/services/workspacesService'\nimport {\n  clamp,\n  colorsAreValueEqual,\n  conversions,\n  copyColorObject,\n  formatAsCssColor,\n  parsePropsColor\n} from '@/utils/picker'\n\nexport default {\n  name: 'ColorPickerDialog',\n  mixins: [dialogMixin],\n  components: {\n    Dialog,\n    Slider\n  },\n  props: {\n    value: {\n      type: String,\n      default: '#000'\n    },\n    label: {\n      type: String,\n      default: 'Select color'\n    },\n    outputFormat: {\n      type: String,\n      default: 'rgb'\n    },\n    showPalette: {\n      type: Boolean,\n      default: true\n    },\n    allowNull: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: () => ({\n    colors: {\n      hex: '#ffffffff',\n      hsl: { h: 0, s: 0, l: 1, a: 1 },\n      hsv: { h: 0, s: 0, v: 1, a: 1 },\n      rgb: { r: 1, g: 1, b: 1, a: 1 }\n    },\n    activeFormat: 'rgb',\n    recentColors: [],\n    movingFromCanvas: false,\n    hue: null,\n    alpha: 1\n  }),\n  computed: {\n    swatches: () => PALETTE,\n    outputColor() {\n      const activeColor = this.colors[this.outputFormat]\n\n      const cssColor = formatAsCssColor(activeColor, this.outputFormat)\n\n      return cssColor\n    },\n    displayColor() {\n      if (this.activeFormat === this.outputFormat) {\n        return this.outputColor\n      }\n\n      const activeColor = this.colors[this.activeFormat]\n\n      const cssColor = formatAsCssColor(activeColor, this.activeFormat)\n\n      return cssColor\n    },\n    visibleChannels() {\n      const allChannels = Object.keys(this.colors[this.activeFormat])\n      return this.activeFormat !== 'hex' ? allChannels.slice(0, 3) : allChannels\n    }\n  },\n  created() {\n    workspacesService.getColors().then(colors => {\n      Array.prototype.push.apply(this.recentColors, colors)\n    })\n\n    if (this.value && typeof this.value === 'string') {\n      this.setColorFromProp(this.value, true)\n    }\n  },\n  mounted() {\n    const passive = { passive: true }\n    document.addEventListener('mousemove', this.moveThumbWithMouse, passive)\n    document.addEventListener('touchmove', this.moveThumbWithTouch, passive)\n    document.addEventListener('mouseup', this.stopMovingThumb, passive)\n    document.addEventListener('touchend', this.stopMovingThumb)\n\n    this.updateCanvas(this.colors)\n  },\n\n  beforeDestroy() {\n    document.removeEventListener('mousemove', this.moveThumbWithMouse)\n    document.removeEventListener('touchmove', this.moveThumbWithTouch)\n    document.removeEventListener('mouseup', this.stopMovingThumb)\n    document.removeEventListener('touchend', this.stopMovingThumb)\n  },\n  methods: {\n    /**\n     * @param {string | ColorHsl | ColorHsv | ColorHwb | ColorRgb} propsColor\n     * @param {boolean} silent\n     */\n    setColorFromProp(propsColor, silent = false) {\n      if (propsColor === null) {\n        return\n      }\n\n      const result = parsePropsColor(propsColor)\n\n      this.activeFormat = result.format\n\n      if (result !== null) {\n        this.setColor(result.format, result.color, silent)\n      }\n    },\n    /**\n     * @param {MouseEvent} event\n     */\n    startMovingThumbWithMouse(event) {\n      this.movingFromCanvas = true\n      this.moveThumbWithMouse(event)\n    },\n\n    /**\n     * @param {TouchEvent} event\n     */\n    startMovingThumbWithTouch(event) {\n      this.movingFromCanvas = true\n      this.moveThumbWithTouch(event)\n    },\n\n    /**\n     * @param {MouseEvent} event\n     */\n    moveThumbWithMouse(event) {\n      if (event.buttons !== 1 || this.movingFromCanvas === false) {\n        return\n      }\n\n      this.moveThumb(event.clientX, event.clientY)\n    },\n\n    /**\n     * @param {TouchEvent} event\n     */\n    moveThumbWithTouch(event) {\n      if (this.movingFromCanvas === false) {\n        return\n      }\n\n      const touchPoint = /** @type {Touch} */ (event.touches[0])\n      this.moveThumb(touchPoint.clientX, touchPoint.clientY)\n    },\n\n    /**\n     * @param {number} clientX\n     * @param {number} clientY\n     */\n    moveThumb(clientX, clientY) {\n      const newThumbPosition = this.getNewThumbPosition(clientX, clientY)\n      const hsvColor = copyColorObject(this.colors.hsv)\n      hsvColor.s = newThumbPosition.x\n      hsvColor.v = newThumbPosition.y\n      this.setColor('hsv', hsvColor)\n    },\n\n    stopMovingThumb() {\n      this.movingFromCanvas = false\n    },\n\n    /**\n     * @param {HTMLElement} canvasElement\n     * @param {number} clientX\n     * @param {number} clientY\n     * @returns {{ x: number, y: number }}\n     */\n    getNewThumbPosition(clientX, clientY) {\n      const rect = this.$refs.canvas.getBoundingClientRect()\n      const x = clientX - rect.left\n      const y = clientY - rect.top\n      const position = {\n        x: clamp(x / rect.width, 0, 1),\n        y: clamp(1 - y / rect.height, 0, 1)\n      }\n\n      return position\n    },\n\n    /**\n     * @param {ColorFormat} sourceFormat\n     */\n    applyColorUpdates(sourceFormat) {\n      for (const [format, convert] of conversions[sourceFormat]) {\n        this.colors[format] = convert(this.colors[sourceFormat])\n      }\n\n      this.hue = this.colors.hsl.h * 360\n      this.alpha = this.colors.rgb.a\n\n      this.updateCanvas(this.colors)\n    },\n\n    /**\n     * @param {any} colors\n     * @param {VisibleColorFormat} activeFormat\n     * @returns {{ colors: any, cssColor: string }}\n     */\n    getEventData(colors, activeFormat) {\n      const cssColor = formatAsCssColor(colors[activeFormat], activeFormat)\n\n      return {\n        colors,\n        cssColor\n      }\n    },\n\n    /**\n     * @param {ColorFormat} format\n     * @param {string | ColorHsl | ColorHsv | ColorHwb | ColorRgb} color\n     * @param {boolean} silent\n     */\n    setColor(format, color, silent) {\n      let normalizedColor = color\n\n      if (!colorsAreValueEqual(this.colors[format], normalizedColor)) {\n        this.colors[format] = normalizedColor\n        this.applyColorUpdates(format)\n\n        if (!silent) {\n          const emitColor =\n            this.alpha === 0 && this.allowNull ? null : this.outputColor\n          this.$emit('input', emitColor)\n        }\n      }\n    },\n\n    addColorToHistory(color) {\n      if (this.recentColors.indexOf(color) !== -1) {\n        return\n      }\n\n      workspacesService.saveColor(color)\n      this.recentColors.push(color)\n\n      if (this.recentColors.length > 32) {\n        workspacesService.removeColor(this.recentColors.shift())\n      }\n    },\n    switchFormat() {\n      const activeFormatIndex = ALLOWED_VISIBLE_FORMATS.findIndex(\n        format => format === this.activeFormat\n      )\n\n      const newFormatIndex =\n        activeFormatIndex === ALLOWED_VISIBLE_FORMATS.length - 1\n          ? 0\n          : activeFormatIndex + 1\n\n      this.activeFormat = ALLOWED_VISIBLE_FORMATS[newFormatIndex]\n    },\n    submitColor() {\n      this.addColorToHistory(this.outputColor)\n    },\n    updateHue(value) {\n      const hsvColor = copyColorObject(this.colors.hsv)\n      hsvColor.h = value / 360\n\n      this.setColor('hsv', hsvColor)\n    },\n    updateAlpha(value) {\n      const hsvColor = copyColorObject(this.colors.hsv)\n      hsvColor.a = value\n\n      this.setColor('hsv', hsvColor)\n    },\n    updateHexColorValue(value) {\n      if (isValidHexColor(value)) {\n        this.setColor('hex', value)\n      }\n    },\n    updateCanvas(colors) {\n      if (!this.$el) {\n        return\n      }\n\n      this.$el.style.setProperty('--vacp-hsl-h', String(colors.hsl.h))\n      this.$el.style.setProperty('--vacp-hsl-s', String(colors.hsl.s))\n      this.$el.style.setProperty('--vacp-hsl-l', String(colors.hsl.l))\n      this.$el.style.setProperty('--vacp-hsl-a', String(colors.hsl.a))\n      this.$refs.canvas.setAttribute(\n        'style',\n        `\n    position: relative;\n    background-color: hsl(calc(var(--vacp-hsl-h) * 360) 100% 50%); /* 1. */\n    background-image:\n      linear-gradient(to top, #000, transparent),  /* 2. */\n      linear-gradient(to right, #fff, transparent) /* 2. */\n    ;\n  `\n      )\n      this.$refs.thumb.setAttribute(\n        'style',\n        `\n    box-sizing: border-box;\n    position: absolute;\n    left: ${colors.hsv.s * 100}%;   /* 3. */\n    bottom: ${colors.hsv.v * 100}%; /* 3. */\n  `\n      )\n    },\n    setNull() {\n      this.setColorFromProp('rgba(0,0,0,0)')\n    }\n  }\n}\n</script>\n<style lang=\"scss\" scoped>\n.color-picker {\n  ::v-deep .dialog-content {\n    background: transparent;\n    width: 250px;\n\n    .dialog-body {\n      padding: 0;\n      background-color: var(--theme-background-100);\n    }\n\n    header,\n    footer {\n      border: 0;\n    }\n  }\n\n  &-sliders {\n    padding: 1rem;\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n  }\n\n  &-controls {\n    padding: 0 0.5rem 1rem;\n    display: flex;\n\n    .form-control {\n      flex-grow: 1;\n      font-size: 0.875rem;\n      white-space: nowrap;\n      overflow: auto;\n    }\n  }\n\n  &-canvas {\n    width: 100%;\n    height: 100px;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -o-user-select: none;\n    user-select: none;\n\n    &__thumb {\n      width: 1rem;\n      height: 1rem;\n      margin: 0 0 -0.5rem -0.5rem;\n      border-radius: 50%;\n      border: 1px solid white;\n      box-shadow: 0 0 0 1px black;\n    }\n  }\n\n  &-colors {\n    padding: 0 8px 4px;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: flex-end;\n    align-items: center;\n\n    &__color {\n      background-color: white;\n      overflow: hidden;\n      margin: 2px;\n      width: 19px;\n      height: 12px;\n      background-color: currentColor;\n      border-radius: 3px;\n      opacity: 1;\n\n      &.-transparent {\n        background-color: transparent !important;\n        background-image: $checkerboard;\n        background-size: 6px 6px;\n        background-position: 0 0, 3px -3px, 0 3px, -3px 0px;\n      }\n    }\n  }\n}\n</style>\n","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ColorPickerDialog.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ColorPickerDialog.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ColorPickerDialog.vue?vue&type=template&id=45f20e28&scoped=true&\"\nimport script from \"./ColorPickerDialog.vue?vue&type=script&lang=js&\"\nexport * from \"./ColorPickerDialog.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ColorPickerDialog.vue?vue&type=style&index=0&id=45f20e28&prod&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"45f20e28\",\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ColorPickerDialog.vue?vue&type=style&index=0&id=45f20e28&prod&lang=scss&scoped=true&\""],"sourceRoot":""}